package $namespace

#import os
import (
	//Official libs
	"bytes"
	"fmt"
	#if $obj.need_strconv
	"strconv"
	#end if

	//3rd party libs
	"labix.org/v2/mgo"
	"labix.org/v2/mgo/bson"
	"github.com/sipin/gothrift/thrift"
	#if $obj.need_search
	"github.com/mattbaird/elastigo/core"
	#end if

	//Own libs
	"db"
)

type $obj.name.value struct {
	#for field in $obj.fields
		#if $field.name.value == "ID"
	ID         bson.ObjectId `bson:"_id" thrift:"$field.name.value,$field.tag"`
		#else
	$field.name.value  $field.go_type `bson:"$field.name.value" thrift:"$field.name.value,$field.tag"`
		#end if
	#end for
	widgets map[string]*Widget
}

#for key, fields in $obj.search.iteritems()
type $(obj.name.value)Search$(key)Obj struct {
	#for field in fields
	$field string `json:"$(field)"`
	#end for
}
#end for

func New$(obj.name.value)() *$obj.name.value {
	rval := new($obj.name.value)
	rval.ID = bson.NewObjectId()
	return rval
}

func New$(obj.name.value)FromBytes(data []byte) *$obj.name.value {
	o := new($obj.name.value)
	transport := thrift.NewStreamTransportR(bytes.NewBuffer(data))
	protocol := thrift.NewTCompactProtocol(transport)
	o.Read(protocol)
	return o
}

func New$(obj.name.value)WithParams(params map[string]string) *$obj.name.value {
	o := new($obj.name.value)
	o.ReadForm(params)
	return o
}

func (w *$(obj.name.value)) initWidget() {
	w.widgets = make(map[string]*Widget, $len($obj.fields))
}

//Thrift Methods

func (p *$obj.name.value) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
#for field in $obj.fields
		case $field.tag:
			if err := p.readField$(field.tag)(iprot); err != nil {
				return err
			}
#end for
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

#for field in $obj.fields
func (p *$obj.name.value) readField$(field.tag)(iprot thrift.TProtocol) error {
	#if $field.type == "string"
	if v, err := iprot.ReadString(); err != nil {
	#else if $field.type == "i32"
	if v, err := iprot.ReadI32(); err != nil {
	#else if $field.type == "i64"
	if v, err := iprot.ReadI64(); err != nil {
	#else if $field.type == "bool"
	if v, err := iprot.ReadBool(); err != nil {
	#else
	Change go.tmpl go support $field.type now!
	#end if
		return fmt.Errorf("error reading field $(field.tag): %s", err)
	} else {
		#if $field.name.value == "ID"
		p.$field.name.value = bson.ObjectId(v)
		#else
		p.$field.name.value = v
		#end if
	}
	return nil
}
#end for

func (p *$obj.name.value) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("$obj.name.value"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
#for field in $obj.fields
	if err := p.writeField$(field.tag)(oprot); err != nil {
		return err
	}
#end for
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

#for field in $obj.fields
func (p *$obj.name.value) writeField$(field.tag)(oprot thrift.TProtocol) (err error) {
	#if $field.type == "string"
	if err := oprot.WriteFieldBegin("$field.name.value", thrift.STRING, $field.tag); err != nil {
		return fmt.Errorf("%T write field begin error $field.type:$field.name.value: %s", p, err)
	}
	if err := oprot.WriteString(string(p.$field.name.value)); err != nil {
	#else if $field.type == "i32"
	if err := oprot.WriteFieldBegin("$field.name.value", thrift.I32, $field.tag); err != nil {
		return fmt.Errorf("%T write field begin error $field.type:$field.name.value: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.$field.name.value)); err != nil {
	#else if $field.type == "i64"
	if err := oprot.WriteFieldBegin("$field.name.value", thrift.I64, $field.tag); err != nil {
		return fmt.Errorf("%T write field begin error $field.type:$field.name.value: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.$field.name.value)); err != nil {
	
	#else if $field.type == "bool"
	if err := oprot.WriteFieldBegin("$field.name.value", thrift.BOOL, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:IsAdmin: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.$field.name.value)); err != nil {
	#else
	Change go.tmpl go support $field.type now!
	#end if
		return fmt.Errorf("%T.$field.name.value ($field.type) field write error: %s", p, err)
	}

	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:ID: %s", p, err)
	}
	return err
}
#end for

func (p *$obj.name.value) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("$(obj.name.value)(%+v)", *p)
}

func (p *$obj.name.value) ToBytes() []byte {
	transport := thrift.NewTMemoryBuffer()
	protocol := thrift.NewTCompactProtocol(transport)
	p.Write(protocol)
	protocol.Flush()

	return transport.Bytes()
}

#include "tmpl" + $os.sep + "mongo.tmpl"

#include "tmpl" + $os.sep + "form.tmpl"

#include "tmpl" + $os.sep + "foreign_key.tmpl"

#include "tmpl" + $os.sep + "collection.tmpl"

#include "tmpl" + $os.sep + "search.tmpl"
