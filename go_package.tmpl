package $namespace

import (
	//Official libs
	"errors"
	"fmt"
	"time"
	"strconv"

	//3rd party libs
	"github.com/sipin/gothrift/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int
var ErrInvalidObjectId = errors.New("Invalid input to ObjectIdHex")

type IDLabelPair struct {
	ID string
	Label string
}

func WidgetDisable(ws ...*Widget) {
	for _, w := range ws {
		w.Disable()
	}
}

func WidgetHidden(ws ...*Widget) {
	for _, w := range ws {
		w.Hide()
	}
}

type Widget struct {
	Label       string
	Value       string
	Name        string
	PlaceHolder string
	Type        string
	ErrorMsg    string
	EnumKey     []int32
	EnumData    map[int32]string
	StringList  []string
	Required    bool
	Disabled    bool
	Hidden      bool
	Readonly    bool
	IsList      bool
	GetBindData	func() (data []*IDLabelPair)
}
func (w *Widget) Disable() {
	w.Disabled = true
}

func (w *Widget) Hide() {
	w.Hidden = true
}

func (w *Widget) String() string {

	if idx, err := strconv.Atoi(w.Value); err == nil {
		if w.StringList != nil {
			return w.StringList[idx]
		}
		if w.EnumData != nil {
			return w.EnumData[int32(idx)]
		}
	}

	if w.GetBindData != nil {
		datas := w.GetBindData()
		for _, data := range datas {
			if w.Value == data.ID {
				return data.Label
			}
		}
	}

	return w.Value
}

type IXuanWuObj interface {
	Id() string
	IsSearchEnabled() bool
	GetLabel() string
	GetListedLabels() []*IDLabelPair
	GetFieldAsString(fieldKey string) (Value string)
	GetFilters() []*Widget
	Widgets() []*Widget
}

var DateTimeLayout = "2006-01-02 15:04"
var DateLayout = "2006-01-02"

func I64Time(c int64) string {
	if c == 0 {
		return ""
	}
	return time.Unix(c, 0).Format(DateTimeLayout)
}

func I64Date(c int64) string {
	if c == 0 {
		return ""
	}
	return time.Unix(c, 0).Format(DateLayout)
}

func I32Time(c int32) string {
	return I64Time(int64(c))
}

func getQueryString(word string, fields []string) map[string]interface{} {
	queryString := make(map[string]interface{})
	queryString["default_operator"] = "OR"
	queryString["fields"] = fields
	queryString["query"] = word

	return queryString
}

func getQuery(key string, data map[string]interface{}) map[string]interface{} {
	query := make(map[string]interface{})
	query[key] = data
	args := make(map[string]interface{})
	args["query"] = query
	return args
}

func getSearchObj(word string, fields []string, params map[string]string, termKeys map[string]bool, dateKeys map[string]bool) map[string]interface{} {
	terms := make(map[string]string)
	ranges := make(map[string]map[string]int64)

	for k, v := range params {
		if _, ok := termKeys[k]; ok {
			terms[k] = v
			continue
		}

		if isStart, ok := dateKeys[k]; ok {
			intVal, _ := time.Parse(DateLayout, v)
			if isStart {
				fieldName := k[0:len(k) - 5]
				if dateVal, ok := ranges[fieldName]; ok {
					dateVal["gte"] = intVal.Unix()
					ranges[fieldName] = dateVal
				} else {
					ranges[fieldName] = map[string]int64{
						"gte": intVal.Unix(),
						"lt":  intVal.AddDate(0, 0, 1).Unix(),
					}
				}
			} else {
				fieldName := k[0:len(k) - 3]
				if dateVal, ok := ranges[fieldName]; ok {
					dateVal["lt"] = intVal.AddDate(0, 0, 1).Unix()
				} else {
					ranges[fieldName] = map[string]int64{
						"gte": intVal.AddDate(0, 0, -1).Unix() + 1,
						"lt":  intVal.AddDate(0, 0, 1).Unix(),
					}
				}
			}
		}
	}

	if len(terms) == 0 && len(ranges) == 0 {
		return getQuery("query_string", getQueryString(word, fields))
	}

	filtered := make(map[string]interface{})
	if word != "" {
		filtered["query"] = map[string]interface{}{
			"query_string": getQueryString(word, fields),
		}
	}

	filter := make(map[string]interface{})
	if len(terms) > 0 {
		filter["term"] = terms
	}

	if len(ranges) > 0 {
		filter["range"] = ranges
	}

	filtered["filter"] = filter

	return getQuery("filtered", filtered)
}
