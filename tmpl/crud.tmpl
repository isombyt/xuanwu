package $namespace

import (
	//Official libs
	// "fmt"

	//Own libs
	"admin"
	autoTpl "tpl/auto"
	"zfw/models"
	"github.com/sipin/web"
)

func init() {
	web.Get("$(urlBase)/index", $(className)Index)
	web.Get("$(urlBase)/view", $(className)View)
	web.Get("$(urlBase)/create", $(className)Create)
	web.Post("$(urlBase)/create", $(className)CreatePost)
	web.Get("$(urlBase)/edit", $(className)Edit)
	web.Post("$(urlBase)/edit", $(className)EditPost)
	web.Post("$(urlBase)/delete", $(className)DeletePost)
}

func getSearch$(className)(q string, limit int, offset int) (objs []*models.$(className)) {
	out, _ := models.$(className)SearchSimple(q, limit, offset)

	for _, hit := range out.Hits.Hits {
		obj, _ := models.$(className)FindByID(hit.Id)
		objs = append(objs, obj)
	}

	return
}

func $(className)Index(ctx *admin.AdminContext) (html string) {
	total := models.$(className)Count(nil)
	limit := 20
	offset := 0
	var obj *models.$(className)
	var objs []*models.$(className)

	q, is_search := ctx.Params["q"]
	if is_search {
		objs = getSearch$(className)(q, limit, offset)
	} else {
		objs, _ = models.$(className)Find(nil, limit, offset)
	}

	stupidGoInterface := make([]models.IXuanWuObj, len(objs))
	for i, v := range objs {
		stupidGoInterface[i] = models.IXuanWuObj(v)
	}
	return autoTpl.Index(ctx.GetFlash(), obj, stupidGoInterface, total, limit, offset)
}

func $(className)Create(ctx *admin.AdminContext) (html string) {
	var obj *models.$(className)
	data := ctx.GetSession("$(className)Create")

	if data != nil {
		obj = models.New$(className)FromBytes(data)
		obj.ValidateData()
		ctx.ClearSession("$(className)Create")
		return autoTpl.Create(obj.Widgets(), "建立$(classLabel)")
	}
	return autoTpl.Create(models.New$(className)().Widgets(), "建立$(classLabel)")
}

func $(className)CreatePost(ctx *admin.AdminContext) (html string) {
	obj := models.New$(className)()

	hasError := obj.ReadForm(ctx.Params)

	if hasError {
		ctx.SetSession("$(className)Create", obj.ToBytes())
		ctx.Redirect("$(urlBase)/create")
		return
	}

	obj.Save()
	ctx.ClearSession("$(className)Create")
	ctx.SetFlashNotice("保存成功")
	ctx.Redirect("index")

	return
}

func $(className)View(ctx *admin.AdminContext) (html string) {
	obj, _ := models.$(className)FindByID(ctx.Params["id"])
	return autoTpl.View(obj)
}

func $(className)Edit(ctx *admin.AdminContext) (html string) {
	obj, _ := models.$(className)FindByID(ctx.Params["id"])
	data := ctx.GetSession("$(className)Edit")

	if data != nil {
		o := models.New$(className)FromBytes(data)
		o.ValidateData()
		ctx.ClearSession("$(className)Edit")

		if o.ID == obj.ID {
			return autoTpl.Edit(o)
		}
	}

	return autoTpl.Edit(obj)
}

func $(className)EditPost(ctx *admin.AdminContext) (html string) {
	obj, _ := models.$(className)FindByID(ctx.Params["id"])

	hasError := obj.ReadForm(ctx.Params)

	if hasError {
		ctx.SetSession("$(className)Edit", obj.ToBytes())
		ctx.Redirect("edit?id=" + obj.Id())
		return
	}

	obj.Save()
	ctx.ClearSession("$(className)Edit")
	ctx.SetFlashNotice("修改成功")

	ctx.Redirect("index")
	return
}

func $(className)DeletePost(ctx *admin.AdminContext) (html string) {
	id, _ := ctx.Params["id"]
	models.$(className)RemoveByID(id)
	ctx.SetFlashNotice("删除成功")
	ctx.Redirect("index")
	return
}
