package $namespace

import (
	//Official libs
	"strconv"

	//3rd party libs
	#for item in $obj.imports
	#if isinstance(item, tuple):
	$item[0] "$item[1]"
	#else
	"$item"
	#end if
	#end for

	//Own libs
	"admin"
	autoTpl "tpl/auto"
	"zfw/models"
	"github.com/sipin/web"
)

#if len($obj.permission) > 0
var (
	#for i in $obj.permission
	P$i["name"] = permission.New("$i["category"].${i['name']}", $i["type"])
	#end for
)
#end if

func init() {
	web.Get("$(urlBase)/index", $(className)Index)
	web.Get("$(urlBase)/view", $(className)View)
	web.Get("$(urlBase)/create", $(className)Create)
	web.Post("$(urlBase)/create", $(className)CreatePost)
	web.Get("$(urlBase)/edit", $(className)Edit)
	web.Post("$(urlBase)/edit", $(className)EditPost)
	web.Post("$(urlBase)/view", $(className)ViewPost)
	web.Post("$(urlBase)/delete", $(className)DeletePost)
}

func getSearch$(className)(q string, params map[string]string, limit int, offset int) (objs []*models.$(className), total int) {
	out, _ := models.$(className)SearchWithParams(q, params, limit, offset)
	total = out.Hits.Total

	for _, hit := range out.Hits.Hits {
		obj, _ := models.$(className)FindByID(hit.Id)
		objs = append(objs, obj)
	}

	return
}

func $(className)Index(ctx *admin.AdminContext) (html string) {
	var total int
	limit := 20
	offset := 0
	if val, ok := ctx.Params["offset"]; ok {
		offset, _ = strconv.Atoi(val)
	}

	if val, ok := ctx.Params["limit"]; ok {
		limit, _ = strconv.Atoi(val)
	}

	var obj *models.$(className)
	var objs []*models.$(className)

	q, is_search := ctx.Params["q"]
	if is_search {
		objs, total = getSearch$(className)(q, ctx.Params, limit, offset)
	} else {
		total = models.$(className)Count(nil)
		objs, _ = models.$(className)Find(nil, limit, offset)
	}

	stupidGoInterface := make([]models.IXuanWuObj, len(objs))
	for i, v := range objs {
		stupidGoInterface[i] = models.IXuanWuObj(v)
	}
	return autoTpl.Index(ctx.Context, ctx.GetFlash(), obj, stupidGoInterface, total, limit, offset)
}

#for act in ["Create", "Read", "Update", "Delete"]
func has$(className)${act}Permission(current, author *models.Users) bool {
	#if len($obj.__getattribute__(act.lower())) == 0
	return true
	#end if
	#for iii in $obj.__getattribute__(act.lower())
	{
		#if len(iii) == 0
		#continue
		#end if
		ret := true
		#if len([i["name"] for i in iii if i["name"] != "Owner"]) > 0
		if ret && !permission.Check(current, P$(", P".join([i["name"] for i in iii if i["name"] != "Owner"]))) {
			ret = false
		}
		#end if

		#if len([i["name"] for i in iii if i["name"] == "Owner"]) > 0
		if ret {
			if !permission.IsSame$("(current, author) || !permission.IsSame".join([i["type"] for i in iii if i["name"] == "Owner"])) (current, author) {
			ret = false
			}
		}
		#end if
		
		if ret {
			return true
		}
	}
	#end for
	return false
}
#end for

func $(className)Create(ctx *admin.AdminContext) (html string) {
	if !has$(className)CreatePermission(ctx.User, nil) {
		ctx.SetFlashAlert("您没有创建的权限")
		return ctx.Redirect("index")
	}
	var obj *models.$(className)
	data := ctx.GetSession("$(className)Create")

	if data != nil {
		obj = models.New$(className)FromBytes(data)
		obj.ValidateData()
		ctx.ClearSession("$(className)Create")
		return autoTpl.Create(ctx.Context, obj.Widgets(), "建立$(classLabel)")
	}
	return autoTpl.Create(ctx.Context, models.New$(className)().Widgets(), "建立$(classLabel)")
}

func $(className)CreatePost(ctx *admin.AdminContext) (html string) {
	if !has$(className)CreatePermission(ctx.User, nil) {
		ctx.SetFlashAlert("您没有创建的权限")
		return ctx.Redirect("index")
	}

	obj := models.New$(className)()

	hasError := obj.ReadForm(ctx.Params)

	if hasError {
		ctx.SetSession("$(className)Create", obj.ToBytes())
		ctx.Redirect("$(urlBase)/create")
		return
	}

	obj.Save()
	ctx.ClearSession("$(className)Create")
	ctx.SetFlashNotice("保存成功")
	ctx.Redirect("index")

	return
}

func $(className)View(ctx *admin.AdminContext) (html string) {
	obj, _ := models.$(className)FindByID(ctx.Params["id"])
	return autoTpl.View(ctx.Context, obj)
}

func $(className)Edit(ctx *admin.AdminContext) (html string) {
	obj, _ := models.$(className)FindByID(ctx.Params["id"])
	data := ctx.GetSession("$(className)Edit")

	if data != nil {
		o := models.New$(className)FromBytes(data)
		o.ValidateData()
		ctx.ClearSession("$(className)Edit")

		if o.ID == obj.ID {
			return autoTpl.Edit(ctx.Context, o)
		}
	}

	return autoTpl.Edit(ctx.Context, obj)
}

func $(className)ViewPost(ctx *admin.AdminContext) (html string) {
	obj, _ := models.$(className)FindByID(ctx.Params["id"])

	hasError := obj.ReadForm(ctx.Params)

	if hasError {
		ctx.SetSession("$(className)View", obj.ToBytes())
		ctx.Redirect("edit?id=" + obj.Id())
		return
	}

	obj.Save()
	ctx.ClearSession("$(className)View")
	ctx.SetFlashNotice("修改成功")
	ctx.Redirect("index")
	return
}

func $(className)EditPost(ctx *admin.AdminContext) (html string) {
	obj, _ := models.$(className)FindByID(ctx.Params["id"])

	hasError := obj.ReadForm(ctx.Params)

	if hasError {
		ctx.SetSession("$(className)Edit", obj.ToBytes())
		ctx.Redirect("edit?id=" + obj.Id())
		return
	}

	obj.Save()
	ctx.ClearSession("$(className)Edit")
	ctx.SetFlashNotice("修改成功")

	ctx.Redirect("index")
	return
}

func $(className)DeletePost(ctx *admin.AdminContext) (html string) {
	id, _ := ctx.Params["id"]
	models.$(className)RemoveByID(id)
	ctx.SetFlashNotice("删除成功")
	ctx.Redirect("index")
	return
}
