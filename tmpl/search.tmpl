//Index Search
func (o *$obj.name.value) IndexSearch() () {
	#for key, fields in $obj.search.iteritems()
	core.Index("$(obj.name.value.lower())", "$(key.lower())", o.ID.Hex(), nil, $(obj.name.value)Search$(key)Obj{
		#for field in fields
		o.$(field),
		#end for
	})
	#end for
}


// Search
#for key, v in $obj.search.iteritems()
func $(obj.name.value)Search$(key)(word string, limit int, offset int) (core.SearchResult, error) {
	searchJson := `{
    "query" : {
        "query_string" :  {
	      "default_operator": "OR",
	      "fields": ` + `$(str(v).replace("'", '"'))` + `,
	      "query": "` + word + `"
	    }
    }
}`
	args := map[string]interface{} {"from" : offset, "size": limit}
	return core.SearchRequest("$(obj.name.value.lower())", "$(key.lower())", args, searchJson)
}
#end for

func $(obj.name.value)SearchPurge() {
#for key, v in $obj.search.iteritems()
	core.Delete("$(obj.name.value.lower())", "$(key.lower())", "", nil)
#end for
}

func $(obj.name.value)SearchRebuild() {
	$(obj.name.value)SearchPurge()
	total := $(obj.name.value)Count(nil)
	step := 100
	start := 0
	for start < total {
		objs, _ := $(obj.name.value)Find(nil, step, start)
		for _, o := range objs {
			o.IndexSearch()
		}
		start += len(objs)
	}
}

func (o *$obj.name.value) HasSimpleSearch() bool {
#if $obj.search.has_key("Simple")
	return true
#else
	return false
#end if
}